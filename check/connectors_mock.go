// Code generated by MockGen. DO NOT EDIT.
// Source: connectors.go

package check

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	kafka "github.com/optiopay/kafka"
	proto "github.com/optiopay/kafka/proto"
	zk "github.com/samuel/go-zookeeper/zk"
)

// MockBrokerConnection is a mock of BrokerConnection interface
type MockBrokerConnection struct {
	ctrl     *gomock.Controller
	recorder *MockBrokerConnectionMockRecorder
}

// MockBrokerConnectionMockRecorder is the mock recorder for MockBrokerConnection
type MockBrokerConnectionMockRecorder struct {
	mock *MockBrokerConnection
}

// NewMockBrokerConnection creates a new mock instance
func NewMockBrokerConnection(ctrl *gomock.Controller) *MockBrokerConnection {
	mock := &MockBrokerConnection{ctrl: ctrl}
	mock.recorder = &MockBrokerConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBrokerConnection) EXPECT() *MockBrokerConnectionMockRecorder {
	return m.recorder
}

// Dial mocks base method
func (m *MockBrokerConnection) Dial(nodeAddresses []string, conf kafka.BrokerConf) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dial", nodeAddresses, conf)
	ret0, _ := ret[0].(error)
	return ret0
}

// Dial indicates an expected call of Dial
func (mr *MockBrokerConnectionMockRecorder) Dial(nodeAddresses, conf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dial", reflect.TypeOf((*MockBrokerConnection)(nil).Dial), nodeAddresses, conf)
}

// Consumer mocks base method
func (m *MockBrokerConnection) Consumer(conf kafka.ConsumerConf) (kafka.Consumer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Consumer", conf)
	ret0, _ := ret[0].(kafka.Consumer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Consumer indicates an expected call of Consumer
func (mr *MockBrokerConnectionMockRecorder) Consumer(conf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consumer", reflect.TypeOf((*MockBrokerConnection)(nil).Consumer), conf)
}

// Producer mocks base method
func (m *MockBrokerConnection) Producer(conf kafka.ProducerConf) kafka.Producer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Producer", conf)
	ret0, _ := ret[0].(kafka.Producer)
	return ret0
}

// Producer indicates an expected call of Producer
func (mr *MockBrokerConnectionMockRecorder) Producer(conf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Producer", reflect.TypeOf((*MockBrokerConnection)(nil).Producer), conf)
}

// Metadata mocks base method
func (m *MockBrokerConnection) Metadata() (*proto.MetadataResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Metadata")
	ret0, _ := ret[0].(*proto.MetadataResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Metadata indicates an expected call of Metadata
func (mr *MockBrokerConnectionMockRecorder) Metadata() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Metadata", reflect.TypeOf((*MockBrokerConnection)(nil).Metadata))
}

// Close mocks base method
func (m *MockBrokerConnection) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockBrokerConnectionMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockBrokerConnection)(nil).Close))
}

// MockZkConnection is a mock of ZkConnection interface
type MockZkConnection struct {
	ctrl     *gomock.Controller
	recorder *MockZkConnectionMockRecorder
}

// MockZkConnectionMockRecorder is the mock recorder for MockZkConnection
type MockZkConnectionMockRecorder struct {
	mock *MockZkConnection
}

// NewMockZkConnection creates a new mock instance
func NewMockZkConnection(ctrl *gomock.Controller) *MockZkConnection {
	mock := &MockZkConnection{ctrl: ctrl}
	mock.recorder = &MockZkConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockZkConnection) EXPECT() *MockZkConnectionMockRecorder {
	return m.recorder
}

// Connect mocks base method
func (m *MockZkConnection) Connect(servers []string, sessionTimeout time.Duration) (<-chan zk.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", servers, sessionTimeout)
	ret0, _ := ret[0].(<-chan zk.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Connect indicates an expected call of Connect
func (mr *MockZkConnectionMockRecorder) Connect(servers, sessionTimeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockZkConnection)(nil).Connect), servers, sessionTimeout)
}

// Close mocks base method
func (m *MockZkConnection) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockZkConnectionMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockZkConnection)(nil).Close))
}

// Exists mocks base method
func (m *MockZkConnection) Exists(path string) (bool, *zk.Stat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", path)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*zk.Stat)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Exists indicates an expected call of Exists
func (mr *MockZkConnectionMockRecorder) Exists(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockZkConnection)(nil).Exists), path)
}

// Set mocks base method
func (m *MockZkConnection) Set(path string, data []byte, version int32) (*zk.Stat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", path, data, version)
	ret0, _ := ret[0].(*zk.Stat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Set indicates an expected call of Set
func (mr *MockZkConnectionMockRecorder) Set(path, data, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockZkConnection)(nil).Set), path, data, version)
}

// Create mocks base method
func (m *MockZkConnection) Create(path string, data []byte, flags int32, acl []zk.ACL) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", path, data, flags, acl)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockZkConnectionMockRecorder) Create(path, data, flags, acl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockZkConnection)(nil).Create), path, data, flags, acl)
}

// Children mocks base method
func (m *MockZkConnection) Children(path string) ([]string, *zk.Stat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Children", path)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(*zk.Stat)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Children indicates an expected call of Children
func (mr *MockZkConnectionMockRecorder) Children(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Children", reflect.TypeOf((*MockZkConnection)(nil).Children), path)
}

// Get mocks base method
func (m *MockZkConnection) Get(path string) ([]byte, *zk.Stat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", path)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(*zk.Stat)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get
func (mr *MockZkConnectionMockRecorder) Get(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockZkConnection)(nil).Get), path)
}

// Lock mocks base method
func (m *MockZkConnection) Lock(path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lock", path)
	ret0, _ := ret[0].(error)
	return ret0
}

// Lock indicates an expected call of Lock
func (mr *MockZkConnectionMockRecorder) Lock(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lock", reflect.TypeOf((*MockZkConnection)(nil).Lock), path)
}

// Unlock mocks base method
func (m *MockZkConnection) Unlock(path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unlock", path)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unlock indicates an expected call of Unlock
func (mr *MockZkConnectionMockRecorder) Unlock(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlock", reflect.TypeOf((*MockZkConnection)(nil).Unlock), path)
}
